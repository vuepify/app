!function(){"use strict";function e(e){return(...t)=>function(e){try{return e()}catch(e){console.error(e)}}((()=>e(...t)))}function t(){setTimeout((()=>location.reload()),100)}const{port:o,version:n}=document.currentScript.dataset,r=new class{constructor(e){this._urls=e}async listenLiveReload(t){const o=await this._openLiveConnection();o.onclose=()=>this.listenLiveReload(t),o.onmessage=e((e=>{!0===JSON.parse(e.data).hotReload&&t()}))}_openLiveConnection(){return new Promise((e=>{const t=new WebSocket(this._urls.liveUrl);t.onopen=()=>e(t),t.onerror=()=>setTimeout(this._openLiveConnection.bind(this),2e3,e)}))}async fetchActualVersion(){return new Promise(((e,t)=>{const o=new XMLHttpRequest;o.open("GET",this._urls.versionUrl),o.onload=()=>e(JSON.parse(o.responseText)),o.onerror=t,o.send(null)}))}}(new class{constructor(e){this._port=e}buildSocketUrl(...e){return[`ws://localhost:${this._port}`,...e].join("/")}buildHttpUrl(...e){return[`http://localhost:${this._port}`,...e].join("/")}get liveUrl(){return this.buildSocketUrl("live")}get versionUrl(){return this.buildHttpUrl("version")}}(o));(async()=>{const e=(await r.fetchActualVersion()).version;if(n<e)return t();await r.listenLiveReload((()=>t())),console.log("%c[Vuepify]","color: #0069c0"," Waiting for reload signal from serviceâ€¦"),VUEPIFY.isHotReloadReady=!0,document.dispatchEvent(new CustomEvent("vuepifyHotReloadReady"))})()}();
