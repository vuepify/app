(()=>{"use strict";function e(){setTimeout((()=>location.reload()),100)}const{port:t,version:o}=document.currentScript.dataset,n=new class{constructor(e){this._urls=e}async listenLiveReload(e){const t=await this._openLiveConnection();var o;t.onclose=()=>this.listenLiveReload(e),t.onmessage=(o=t=>{!0===JSON.parse(t.data).hotReload&&e()},(...e)=>function(e){try{return e()}catch(e){console.error(e)}}((()=>o(...e))))}_openLiveConnection(){return new Promise((e=>{const t=new WebSocket(this._urls.liveUrl);t.onopen=()=>e(t),t.onerror=()=>setTimeout(this._openLiveConnection.bind(this),2e3,e)}))}async fetchActualVersion(){return new Promise(((e,t)=>{const o=new XMLHttpRequest;o.open("GET",this._urls.versionUrl),o.onload=()=>e(JSON.parse(o.responseText)),o.onerror=t,o.send(null)}))}}(new class{constructor(e){this._port=e}buildSocketUrl(...e){return[`ws://localhost:${this._port}`,...e].join("/")}buildHttpUrl(...e){return[`http://localhost:${this._port}`,...e].join("/")}get liveUrl(){return this.buildSocketUrl("live")}get versionUrl(){return this.buildHttpUrl("version")}}(t));(async()=>{const t=(await n.fetchActualVersion()).version;if(o<t)return e();await n.listenLiveReload((()=>e())),console.log("%c[Vuepify]","color: #0069c0"," Waiting for reload signal from serviceâ€¦"),VUEPIFY.isHotReloadReady=!0,document.dispatchEvent(new CustomEvent("vuepifyHotReloadReady"))})()})();